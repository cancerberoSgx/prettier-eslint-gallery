prettier-eslint [DEBUG]: getting eslint config for file at "/home/sg/git/prettier-eslint-issue/test/.eslintrc.js"
prettier-eslint [DEBUG]: reducing eslint rules down to relevant rules only
prettier-eslint [DEBUG]: The printWidth rule is not configured, let prettier decide
prettier-eslint [DEBUG]: The tabWidth rule is not configured, let prettier decide
prettier-eslint [DEBUG]: The parser rule is not configured, let prettier decide
prettier-eslint [DEBUG]: The singleQuote rule is not configured, let prettier decide
prettier-eslint [DEBUG]: The trailingComma rule is not configured, let prettier decide
prettier-eslint [DEBUG]: The bracketSpacing rule is not configured, let prettier decide
prettier-eslint [DEBUG]: The semi rule is not configured, let prettier decide
prettier-eslint [DEBUG]: The useTabs rule is not configured, let prettier decide
prettier-eslint [DEBUG]: inferred options: Object {
  "eslintConfig": Object {
    "env": Object {},
    "fix": true,
    "globals": Array [],
    "parserOptions": Object {},
    "rules": Object {
      "prefer-arrow-callback": "error",
    },
    "useEslintrc": false,
  },
  "eslintPath": "/home/sg/git/prettier-eslint-issue/node_modules/eslint/lib/api.js",
  "filePath": "/home/sg/git/prettier-eslint-issue/test/.eslintrc.js",
  "logLevel": "debug",
  "prettierLast": undefined,
  "prettierOptions": Object {},
  "prettierPath": "/home/sg/git/prettier-eslint-issue/node_modules/prettier/index.js",
  "text": "//@module Banana
define('Banana.Collection'
,	[	'Banana.Model'
	,	'Backbone'
	,	'underscore'
	]
,	function (
		Model
	,	Backbone
	,	_
	)
{
	'use strict';

	//@class Banana.Collection @extend Backbone.Collection
	return Backbone.Collection.extend(
	{
		//@property {Banana.Model} model
		model: Model

	,	validation: {
			name: {
				required: true,
				fn: function()
				{
					return value.length > 20 ? 'Name is too long' : false;
				}
			}
		,	phone: {
				required: true
			,	fn: _.validation.phone
			}
		}

		//@property {String} url
	,	url: 'api/banana.php'

		//@method comparator Defines a custom comparative method between Banana to sort the Banana taking into account if there are default shipping or default billing
		//@param {Banana.Model} model
		//@return {Number}
	,	comparator: function (model)
		{
			return (model.get('notready') || model.get('alreadyeaten')) ? 0 : 1;
		}

	});
});
",
}
prettier-eslint [DEBUG]: calling prettier on text
